<?php
/**
 * ILIAS REST Plugin for the ILIAS LMS
 *
 * Authors: D.Schaefer and T.Hufschmidt <(schaefer|hufschmidt)@hrz.uni-marburg.de>
 * Since 2014
 */
namespace RESTController\extensions\umr_v1;


// This allows us to use shortcuts instead of full quantifier
// Requires: $app to be \RESTController\RESTController::getInstance()
use \RESTController\libs as Libs;
use \RESTController\libs\RESTAuth as RESTAuth;
use \RESTController\core\oauth2_v2 as Auth;


// Put implementation into own URI-Group
$app->group('/v1/umr', function () use ($app) {
  // Put redirects implementation into own URI-Group
  $app->group('/redirect', function () use ($app) {
    // Put redirects with login implementation into own URI-Group
    $app->group('/login', function () use ($app) {
      /**
       * Route: GET /v1/umr/redirect/login/advanced/:type/:refId
       *  Generates a redirect to a permanent-link for
       *  the object given by the Reference-Id (and
       *  for the given object-type).
       *  This route requires a special really short-lived
       *  access-token that is generated by the challenge route.
       *  This route also generates an ILIAS-Session
       *  on the server and transmits the corresponding
       *  cookies for use by the client. (eg. browser)
       *
       * @See docs/api.pdf
       */
      $app->get('/advanced/:type/:refId', RESTAuth::checkAccess(RESTAuth::PERMISSION), function ($type, $refId) use ($app) {
        // Fetch userId & userName
        $accessToken = $app->request->getToken();
        $userName     = $accessToken->getUserName();

        // Test if token is a short (ttl) one and ip does match
        if ($accessToken->getEntry('type') != 'short-token')
          $appt->halt(401, 'This route requires a special short-lived access-token.');
        if ($accessToken->getEntry('misc') != Libs\RESTLib::FetchUserAgentIP())
          $appt->halt(401, 'This token was generated from another address then the your current one.');

        // Login user (since token is valid, should not fail)
        Redirect::createSession($userName);

        // Fetch session cookies, such that slim can use them
        $cookies = Redirect::getSessionCookies();
        foreach ($cookies as $cookie)
          $app->setCookie($cookie['key'], $cookie['value'], $cookie['expires'], $cookie['path']);

        // Convert refId to numer (unless its something else)
        if (is_numeric($refId))
          $refId = intval($refId);

        // Fetch permanent-link
        $link = Redirect::getLink($refId, $type);

        // Output result
        $app->response->redirect($link, 303);
      });


      /**
       * Route: GET /v1/umr/redirect/login/simple/:type/:refId
       *  Generates a redirect to a permanent-link for
       *  the object given by the Reference-Id (and
       *  for the given object-type).
       *  This route also generates an ILIAS-Session
       *  on the server and transmits the corresponding
       *  cookies for use by the client. (eg. browser)
       *
       * @See docs/api.pdf
       */
      $app->get('/simple/:type/:refId', RESTAuth::checkAccess(RESTAuth::PERMISSION), function ($type, $refId) use ($app) {
        // Fetch userId & userName
        $accessToken = $app->request->getToken();
        $userName     = $accessToken->getUserName();

        // Login user (since token is valid, should not fail)
        Redirect::createSession($userName);

        // Fetch session cookies, such that slim can use them
        $cookies = Redirect::getSessionCookies();
        foreach ($cookies as $cookie)
          $app->setCookie($cookie['key'], $cookie['value'], $cookie['expires'], $cookie['path']);

        // Convert refId to numer (unless its something else)
        if (is_numeric($refId))
          $refId = intval($refId);

        // Fetch permanent-link
        $link = Redirect::getLink($refId, $type);

        // Output result
        $app->response->redirect($link, 303);
      });


    // End of '/login/' URI-Group
    });


    /**
     * Route: GET /v1/umr/redirect/link/:type/:refId
     *  Generates a redirect to a permanent-link for
     *  the object given by the Reference-Id (and
     *  for the given object-type).
     *  This route does not generate any ILIAS-Session
     *
     * @See docs/api.pdf
     */
    $app->get('/link/:type/:refId', function ($type, $refId) use ($app) {
      // Convert refId to numer (unless its something else)
      if (is_numeric($refId))
        $refId = intval($refId);

      // Fetch permanent-link
      $link = Redirect::getLink($refId, $type);

      // Output result
      $app->response->redirect($link, 303);
    });


  // End of '/redirect/' URI-Group
  });
// End of '/v1/umr/' URI-Group
});

/*

  */
